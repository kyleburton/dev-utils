require 'fileutils'
$config = {
  'Linux' => {
    # 1.3
    :pkg_url  => "https://storage.googleapis.com/golang/go1.3.linux-amd64.tar.gz", # "http://golang.org/dl/go1.3.linux-amd64.tar.gz",
    :pkg_sha1 => "b6b154933039987056ac307e20c25fa508a06ba6"
    # 1.2.1
      # :pkg_url  => "https://go.googlecode.com/files/go1.2.1.linux-amd64.tar.gz",
      # :pkg_sha1 => "7605f577ff6ac2d608a3a4e829b255ae2ebc8dcf"

    # 1.1
     # :pkg_url  => "https://go.googlecode.com/files/go1.1.linux-amd64.tar.gz",
     # :pkg_sha1 => "58087060236614f13d7089d798055b4255ed02ec"
  },
  'Darwin' => {
     #:pkg_url  => "https://go.googlecode.com/files/go1.1.darwin-amd64.tar.gz",
     #:pkg_sha1 => "d4dcf2c42ed465731d3050265ac4cf10acf11c15"
     #:pkg_url  => "http://go.googlecode.com/files/go1.2.1.darwin-amd64-osx10.8.tar.gz",
     #:pkg_sha1 => "da48bfa2f31c32d779dc99564324ec25a20f8e3c"
     #:pkg_url  => "https://storage.googleapis.com/golang/go1.3.darwin-amd64-osx10.8.tar.gz", # "http://golang.org/dl/go1.3.darwin-amd64-osx10.8.tar.gz",
     #:pkg_sha1 => "4e8f2cafa23797211fd13f3fa4893ce3d5f084c4"
     #:pkg_url  => "https://storage.googleapis.com/golang/go1.5.1.darwin-amd64.tar.gz",
     #:pkg_sha1 => "02451b1f3b2c715edc5587174e35438982663672"

     # :pkg_url  => "https://storage.googleapis.com/golang/go1.5.3.darwin-amd64.pkg",
     # :pkg_sha1 => "9df7716f777e46fa6b54f1cf7324f7ab81ff6789"

     # :pkg_url  => "https://storage.googleapis.com/golang/go1.7.darwin-amd64.tar.gz",
     # :pkg_sha1 => "51d905e0b43b3d0ed41aaf23e19001ab4bc3f96c3ca134b48f7892485fc52961"

     # :pkg_url  => "https://storage.googleapis.com/golang/go1.8.darwin-amd64.tar.gz",
     # :pkg_sha1 => "6fdc9f98b76a28655a8770a1fc8197acd8ef746dd4d8a60589ce19604ba2a120"
     :pkg_url  => "https://dl.google.com/go/go1.10.1.darwin-amd64.tar.gz",
     :pkg_sha1 => "0a5bbcbbb0d150338ba346151d2864fd326873beaedf964e2057008c8a4dc557"
  }
}

def platform
  @platform ||= `uname`.chomp!
end

def config
  c = $config[platform]
  unless c
    raise "Error: no configuration for this platform: '#{platform}'"
  end
  c
end

def pkg_url
  config[:pkg_url]
end

def pkg_file
  File.basename(pkg_url)
end

def pkg_dir
  File.basename(pkg_url, ".tar.gz")
end

def pkg_sha1
  config[:pkg_sha1]
end

def chdir! p
  unless File.exist? p
    Dir.mkdir p
  end
  Dir.chdir(p) do |p|
    yield p
  end
end

def system! *cmd
  cmd = cmd.join(" ")
  res = system cmd
  unless res
    raise "Error running command: '#{cmd}' : #$!"
  end
  true
end

desc "Install the current go"
task :install do
  chdir! "software" do
    unless File.exist? pkg_file
      system! "curl", "-o", pkg_file, pkg_url
    end

    unless File.exist? "go"
      system! "tar", "xzvf", pkg_file
    end
  end

  File.open('env.go', 'w') do |f|
    cwd = Dir.pwd
    go_root = "#{cwd}/software/go"
    f.puts "export GOROOT=#{go_root}"
    f.puts "export GOPATH=#{cwd}/go-packages"
    f.puts "export PATH=$GOROOT/bin:$GOPATH/bin:$PATH"
  end
end

desc "remove the current go"
task :uninstall do
  FileUtils.rm_rf "software/go"
end
