#!/usr/bin/env ruby
require 'rubygems'
require 'hpricot'
require 'mechanize'
require 'yaml'
require 'colorize'
require 'json'

class Jenkins
  attr_accessor :config

  def self.symbolize_keys m
    n = {}
    m.each do |k,v|
      n[k.to_sym] = v.class == Hash ? Jenkins.symbolize_keys(v) : v
    end
    n
  end

  def initialize
    @config ||= {}
    config_file = "#{ENV['HOME']}/.jenkins-cli.yml"
    if File.exist? config_file
      @config = @config.merge Jenkins.symbolize_keys(YAML.load_file(config_file))[:jenkins]
      #puts "config: #{@config.inspect}"
    else
      puts "WARNING: no config file: #{config_file}"
    end
    @ua = Mechanize.new
    if @config[:htauth]
      @ua.add_auth(@config[:base_url],@config[:htauth][:user],@config[:htauth][:pass])
    end
    @ua.agent.http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    super
  end

  def make_url url
    "#{@config[:base_url]}#{url}"
  end

  def raw_get url, query_params = {}
    @ua.get make_url(url), query_params
  end

  def raw_post url, data, headers={}
    headers = {"Content-Type"=>"application/x-www-form-urlencoded; charset=UTF-8"}.merge(headers)
    url = make_url(url)
    #puts "posting to: #{url}"
    #puts "   headers: #{headers.inspect}"
    @ua.post(url, data, headers)
  end

  def command_line_arguments
    # super << []
    super
  end

  def last_successful_build_info row
    info = {}
    last_success_info = (row/"td").search("a[@href$='lastSuccessfulBuild/']").first
    if last_success_info.nil?
      return info
    else
      last_success_info = last_success_info.parent
      info[:time] = last_success_info.get_attribute('data')
      info[:ago]  = last_success_info.inner_html.split(/\s{2,}/)[1]
      info[:build] = last_success_info.search("a").first.inner_html
      return info
    end
  end
  
  def last_failed_build_info row
    info = {}
    last_failed_info = (row/"td").search("a[@href$='lastFailedBuild/']").first
    if last_failed_info.nil?
      return info
    else
      last_failed_info = last_failed_info.parent
      info[:time] = last_failed_info.get_attribute('data')
      info[:ago]  = last_failed_info.inner_html.split(/\s{2,}/)[1]
      info[:build] = last_failed_info.search("a").first.inner_html
      return info
    end
  end

  def detailed_projects_list
    if @detailed_projects_list.nil?
      @detailed_projects_list = []
      resp = raw_get "/"
      doc = Hpricot(resp.body)
      (doc/"table#projectstatus"/"tr")[1..-1].each do |row|
        rdoc = Hpricot(row.to_s)
        job_names = (rdoc/"a[@href^='job']")
        next if job_names.empty?
        job_name = job_names.first.to_s.scan(/job\/([^\/]+)\//).first.first
        status = (rdoc/"img").first.to_s.scan(/tooltip=\"([^"]+)\"/).first.first
        job_info = {:name => job_name, 
                    :status => status, 
                    :last_success => last_successful_build_info(rdoc),
                    :last_failure => last_failed_build_info(rdoc)
                    }
        @detailed_projects_list << job_info
      end
    end
    @detailed_projects_list
  end

  def projects_list
    if @projects_list.nil?
      @projects_list = []
      resp = raw_get "/"
      doc = Hpricot(resp.body)
      (doc/"table#projectstatus"/"a[@href^='job']").each do |link|
        job_name = link[:href].scan(/job\/([^\/]+)\//).first.first
        @projects_list << job_name
      end
      @projects_list = @projects_list.uniq.sort
    end

    @projects_list
  end

  def cmd_ls
    puts String.colors.inspect
    detailed_projects_list.each do |pinfo|
      status = pinfo[:status]
      succeeded = status == "Success"
      if status == "Success"
        status = status.green
      elsif status == "In progress"
        status = status.blue
      elsif status == "Disabled"
        status = status.light_green
      else
        status = status.red
      end
      output_cmd = succeeded ? "" : "# jenkins output #{pinfo[:name]}".yellow
      puts "#{pinfo[:name]}\t#{status}\t#{output_cmd}"
    end
  end
  
  def cmd_la
    detailed_projects_list.each do |pinfo|
      status = pinfo[:status]
      succeeded = status == "Success"
      if status == "Success"
        status = status.green
      elsif status == "In progress"
        status = status.blue
      else
        status = status.red
      end

      if pinfo[:last_success].empty?
        last_build_success = "  Last Success: N/A".yellow
      else
        last_build_success = "  Last Success: #{pinfo[:last_success][:ago]} ago, build #{pinfo[:last_success][:build]}".yellow
      end

      if pinfo[:last_failure].empty?
        last_build_failure = "  Last Failure: N/A".yellow
      else
        last_build_failure = "  Last Failure: #{pinfo[:last_failure][:ago]} ago, build #{pinfo[:last_failure][:build]}".yellow
      end
      
      output_cmd = succeeded ? "" : "# jenkins output #{pinfo[:name]}".yellow
      puts "#{pinfo[:name]}\t#{status}\n#{last_build_success}\n#{last_build_failure}"
    end
  end

  def assert_project! project
    unless projects_list.member? project
      puts "Error: project does not exist #{project.inspect}.  Try one of: #{@projects_list.join(" ")}"
      exit 1
    end
    true
  end

  def cmd_build *args
    watch = false
    project = nil
    build_params = nil
    if args[0] == '-w'
      watch = true
      args.shift
    end

    project = args.shift
    build_params = args.shift

    if project.nil? || project.empty?
      project = load_job_config["name"]
    end

    if build_params.nil? || build_params.empty?
      build_params = load_job_config["build_params"] || nil
    end

    assert_project! project
    last_id = latest_build_id project
    puts "triggering: #{project}"
    resp = :api_response
    if build_params.nil?
      resp = raw_get "/job/#{project}/build?delay=0sec"
    else
      build_params = JSON.parse(build_params)
      build_params["json"] = {"parameter" => build_params}.to_json
      resp = raw_post "/job/#{project}/build?delay=0sec", build_params
    end

    if watch
      if last_id.nil?
        $stdout.puts "Sorry, can't automatically watch the initial build, try following it in a second..."
        return
      end

      # wait for the next job to start
      puts "Waiting for new build to start, last was: #{last_id}"
      while last_id == get_project_info(project)[:builds].first[:number]
        print '.'
        sleep 0.5
        $stdout.flush
      end
      cmd_tail "-f", project
    end
  end

  def get_project_info project
    assert_project! project
    proj_info = {:name => project, :builds => []}
    resp = raw_get "/job/#{project}/"
    doc = Hpricot(resp.body)
    (doc/"table#buildHistory"/"tr.build-row").each do |row|
      next if (row/"img").first.nil?
      status = (row/"img").first[:tooltip]
      next if status.nil?
      link = (row/"a.tip").first
      status = status.split(/\s+/).first
      build_id = link[:href].scan(/\/(\d+)\/$/).first
      proj_info[:builds] << {:number => build_id, :status => status}
    end
    proj_info
  end

  def cmd_show project
    get_project_info(project)[:builds].each do |build|
      puts "#{build[:number]} #{build[:status]}"
    end
  end

  def latest_build_id project
    info = get_project_info(project)
    if info[:builds] && info[:builds].first
      num = info[:builds].first[:number]
      if num.kind_of?(Array)
        num[0]
      else
        num
      end
    else
      nil
    end
  end

  # cat output of a job
  def cmd_output project=nil, build=nil
    if project.nil? || project.empty?
      project = load_job_config["name"]
    end

    build = latest_build_id(project)
    puts "get me #{project}/#{build}"
    resp = raw_get "/job/#{project}/#{build}/consoleText"
    puts resp.body
  end


  def cmd_tail *args
    follow, project = *args
    if follow == "-f"
      follow, project = true, project
    else
      follow, project = false, follow
    end

    if project.nil? || project.empty?
      project = load_job_config["name"]
    end

    build = latest_build_id(project)
    last = ""
    start = 0
    while true
      resp = raw_post "/job/#{project}/#{build}/logText/progressiveHtml", {:start => start}
      start = resp.header["x-text-size"]
      #$stderr.puts "new start=#{start}"
      last = resp.body
      print last
      break unless follow
      break unless resp.header["x-more-data"] == "true"
    end
  end

  def git_url
    if File.exist? ".git"
      return `grep url .git/config | head -n 1 |cut -f2 -d=`.chomp.strip
    end

    if File.exist? "../.git"
      return `grep url ../.git/config | head -n 1 |cut -f2 -d=`.chomp.strip
    end

    raise "Sorry, couldn't find a .git directory for the git_url, you'll have to create the config file yourself."
  end

  def load_job_config config_file=".jenkins-config.json"
    if !File.exist? config_file
      return {}
    end

    if false && !File.exist?(config_file)
      File.open(config_file, "w") do |f|
        f.write <<-END
{
  "name":           "#{File.basename(Dir.pwd)}",
  "builds_to_keep": "2",
  "git_url":        "#{git_url}",
  "build_command":  "bash bin/jenkins-build.sh",
  "email":          "#{@config[:email] || 'build@your-company.com'}"
}
        END
      end
      $stdout.puts "It looks like there was no #{config_file} here, so I made one for you:"
      $stdout.puts File.read(config_file)
      $stdout.puts "Please update it and run this command again."
      exit 1
    end
    content = File.read(config_file)
    config  = JSON.parse(content)
  end

  def cmd_new_job config_file=".jenkins-config.json"
    config  = load_job_config config_file

    create_params = {
      "name"   => config["name"],
      "mode"   => "hudson.model.FreeStyleProject",
      "Submit" => "OK",

      "json" => {
        "name"   => config["name"],
        "mode"   => "hudson.model.FreeStyleProject",
        "from"   => "",
        "Submit" => "OK"
      }.to_json
      }

    raw_post "/view/All/createItem", create_params, 'Content-Type' => 'application/x-www-form-urlencoded'
    cmd_configure_job config_file
  end

  def cmd_configure_job config_file=".jenkins-config.json"
    config  = load_job_config config_file


    params = {
      "json" => {
        "name" => config["name"],
        "description" => config["description"] || "Build: #{config["name"]}",
        "logrotate" => {
          "logrotate_days" => "",
          "logrotate_nums" => (config["builds_to_keep"] or "2"),
          "logrotate_artifact_days" => "",
          "logrotate_artifact_nums" => ""
        },
        "properties" => {
          "stapler-class-bag" => "true",
          "hudson-model-ParametersDefinitionProperty" => {}
        },
        "displayNameOrNull" => "",
        "scm" => {
          "value" => "1",
          "userRemoteConfigs" => {
            "url" =>  config["git_url"],
            "name" => "",
            "refspec" => ""
          },
          "branches" => {
            "name" => (config["git_branches"] || 'master')
          },
          "includedRegions" => "",
          "excludedRegions" => "",
          "excludedUsers" => "",
          "localBranch" => "",
          "relativeTargetDir" => "",
          "reference" => "",
          "scmName" => "",
          "gitConfigName" => "",
          "gitConfigEmail" => "",
          "pruneBranches" => false,
          "skipTag" => false,
          "clean" => false,
          "remotePoll" => false,
          "disableSubmodules" => false,
          "recursiveSubmodules" => false,
          "authorOrCommitter" => false,
          "wipeOutWorkspace" => false,
          "ignoreNotifyCommit" => false,
          "useShallowClone" => false,
          "" => ["hudson.plugins.git.util.DefaultBuildChooser", "auto"],
          "buildChooser" => {
            "stapler-class" => "hudson.plugins.git.util.DefaultBuildChooser"
          },
          "gitTool" => "Default"
        },
        # NB: support pseudoUpstreamTrigger, upstreamProjects
        # "pseudoUpstreamTrigger": {"upstreamProjects": "rn-boomerang"},
        "builder" => {
          "command" => (config["build_command"] or raise("You must supply a build_command")),
          "stapler-class" => "hudson.tasks.Shell",
          "kind" => "hudson.tasks.Shell"
        },
        "publisher" => {
          "mailer_recipients" => (config["email"] or raise("You must supply an email for build failures")),
          "mailer_notifyEveryUnstableBuild" => true,
          "mailer_sendToIndividuals" => false,
          "stapler-class" => "hudson.tasks.Mailer",
          "kind" => "hudson.tasks.Mailer"
        },
        "core:apply" => "true"
      },
      "logrotate" => "on",
      "logrotate_nums" => (config["builds_to_keep"] or "2"),
      "scm"            => "1",
      "_.url"          => config["git_url"],
      "_.name"         => (config["git_branches"] || 'master'),
      "mailer_recipients" => config["email"],
      "description"       => (config["description"] or "Build: #{config["name"]}")
    }

    if config["build_after"]
      params["pseudoUpstreamTrigger"]          = "on"
      params["upstreamProjects"]               = config["build_after"]
      params["json"]["pseudoUpstreamTrigger"] ||= {}
      params["json"]["pseudoUpstreamTrigger"]["upstreamProjects"] = config["build_after"]
    end

    params["json"] = params["json"].to_json

    raw_post "/job/#{config["name"]}/configSubmit", params, 'Content-Type' => 'application/x-www-form-urlencoded'
  end

  def run
    if ARGV.empty?
      available = self.methods.map {|m| m.to_s}.select {|m| m.start_with? "cmd_"}.map {|m| m.sub(/cmd_/,'') }
      puts "You must supply a command: one of: #{available.join ", "}"
      puts %Q||
      puts %Q|  List Projects:|
      puts %Q|    jenkins ls|
      puts %Q||
      puts %Q|  View Last Build Output:|
      puts %Q|    jenkins output project-name|
      puts %Q||
      puts %Q|  Build a project:|
      puts %Q|    jenkins build project-name|
      puts %Q|    jenkins build -w project-name|
      puts %Q|    jenkins build -w project-name '{"name": "build-param-name", "value": "param-value"}'|
      puts %Q||
      exit 1
    end
    cmd = ("cmd_" + ARGV.shift.to_s.gsub('-','_')).to_sym
    unless self.respond_to? cmd
      raise "Error: command not recognized: #{cmd}"
    end

    self.send cmd, *ARGV
  end
end

Jenkins.new.run
