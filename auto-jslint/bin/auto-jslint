#!/usr/bin/env ruby
require 'rubygems'
require 'base_app'

class AutoJSLint < BaseApp
  def initialize
    super
  end

  def command_line_arguments
    super.concat([
                 ['w','watch','Interactively Watch until all js lint errors are fixed.'],
                 ['n','dryrun','Show what it would do, but do not do it.']
    ])
  end

  def glob_for_js_files argv
    if argv.empty?
      Dir.glob("**/*.js").concat(Dir.glob("**/*.json"))
    else
      argv.to_a
      dirs = []
      argv.each do |arg|
        if File.file?(arg)
          dirs << arg
        elsif File.directory?(arg)
          dirs.concat(Dir.glob("#{arg}/**/*.js")).concat(Dir.glob("#{arg}/**/*.json"))
          puts arg
        else
          puts "#{arg} not a file or directory?"
        end
      end
      dirs
    end
  end

  def find_js_files argv
    files = glob_for_js_files argv
    if File.exist? ".jslint.ignore"
      file_to_ignore = File.readlines(".jslint.ignore").map do |line|
        line.chomp!
        line
      end

      files = files.select do |f|
        ignore_this_file = false
        file_to_ignore.each do |ignore_me|
          if f.include? ignore_me
            ignore_this_file = true
            break
          end
        end
        !ignore_this_file
      end
    end
    files
  end

  def lint_all_files argv
    @results = []
    @stats = {:passed => 0, :failed => 0, :total => 0}
    find_js_files(argv).each do |jsfile|
      result = `jslint #{jsfile} 2>&1`
      info = {:file => jsfile, :output => result, :result => $?}
      @results << info
      unless result.empty?
        puts result
      end
      if $? && (result.empty? || result.include?("js is OK.") || result.include?("json is OK."))
        puts "# PASS: #{jsfile}"
        info[:passed] = true
        info[:failed] = false
        @stats[:passed] += 1
      else
        info[:passed] = false
        info[:failed] = true
        @stats[:failed] += 1
      end
      @stats[:total] += 1
    end
  end

  def wait_for_user_to_fix_everything
    file = Tempfile.new('jslint.fixup')
    File.open(file, "w") do |f|
      emit_fixup_script f
    end
    system "watch", "-d", "-n2", "bash", file
    file.unlink
  end

  def emit_fixup_script ofh=$stdout
    ofh.puts "################################################################################"
    ofh.puts "# cut and paste from here"
    ofh.puts "js_lint () {"
    ofh.puts "  if jslint \"$1\"; then"
    ofh.puts "    echo \"PASS: $1\""
    ofh.puts "    return 1"
    ofh.puts "  else"
    ofh.puts "    echo \"FAIL: $1\""
    ofh.puts "    return 0"
    ofh.puts "  fi"
    ofh.puts "}"
    ofh.puts ""
    ofh.puts "js_cleanup () {"
    ofh.puts "  echo 'ok' | watch -e -d -n 2 bash -c \"echo vim $1; if jslint $1; then exit 1; else exit 0; fi\" || echo \"CLEAN $1\""
    ofh.puts "}"
    ofh.puts ""
    @results.select {|inf| inf[:failed]}.each do |info|
      ofh.puts "js_cleanup #{info[:file]}"
    end
  end

  def run
    if self.dryrun
      find_js_files(ARGV).each do |jsfile|
        puts "jslint #{jsfile} 2>&1"
      end
      return
    end

    lint_all_files ARGV

    puts "# #{@stats[:total]} files checked, #{@stats[:passed]} linted, #{@stats[:failed]} did not"
    if @stats[:failed] > 0
      if self.watch
        wait_for_user_to_fix_everything
      else
        emit_fixup_script
        exit 1
      end
    end
    exit 0
  end
end

AutoJSLint.main
